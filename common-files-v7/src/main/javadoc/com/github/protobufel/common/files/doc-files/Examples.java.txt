//
// Copyright Â© 2014, David Tesler (https://github.com/protobufel)
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of the <organization> nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

package com.github.protobufel.common.files;

import java.nio.file.Path;
import java.nio.file.Paths;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.github.protobufel.common.files.resources.Resources.FileSet;
import com.github.protobufel.common.files.resources.Resources.IFileSet;

public class Example {
  private static final Logger log = LoggerFactory.getLogger(Example.class);
  private static final int ROOT_DIRECTORY_INDEX = 0; // root path
  private static final int DIRECTORY_INDEX = 1; // path to start filtering, under root
  private static final int INCLUDES_INDEX = 2; // comma separated blob/regex sequence 
  private static final int EXCLUDES_INDEX = 3; // comma separated blob/regex sequence
  private static final int ALLOW_DIRS_IN_RESULT_INDEX = 4;
  private static final int ALLOW_FILES_IN_RESULT_INDEX = 5;
  private static final int FOLLOW_LINKS_INDEX = 6;
  private static final int ALLOW_DUPLICATES_INDEX = 7;

  public static void main(final String[] args) {
    final Path rootDir = Paths.get(args[ROOT_DIRECTORY_INDEX]);
    final String dir = args[DIRECTORY_INDEX];
    final boolean allowDirs = Boolean.parseBoolean(args[ALLOW_DIRS_IN_RESULT_INDEX]);
    final boolean allowFiles = Boolean.parseBoolean(args[ALLOW_FILES_IN_RESULT_INDEX]);
    final boolean followLinks = Boolean.parseBoolean(args[FOLLOW_LINKS_INDEX]);
    final boolean allowDuplicates = Boolean.parseBoolean(args[ALLOW_DUPLICATES_INDEX]);
    final String[] includes = args[INCLUDES_INDEX].split(",");
    final String[] excludes = args[EXCLUDES_INDEX].split(",");

    final IFileSet fileSet =
        FileSet.builder().allowDirs(allowDirs).allowFiles(allowFiles).directory(dir)
            .addIncludes(includes).addExcludes(excludes).build();

    final Iterable<Path> files =
        PathVisitors.getResourceFiles(rootDir, fileSet, followLinks, allowDuplicates, log);

    // process your selected files
    for (final Path path : files) {
      log.info("file path {}", path);
    }
  }
}
